#+TITLE:  \lambda 表达式，而已
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css" />

首先，热烈庆祝本号关注人数破百（这是不是也暴露了本号根本无人关注的惨状呢？）

之前的讨论已经说明，Haskell中的函数都是单输入单输出的形式，即其类型都可归结为 ~x -> y~ ,其中 ~x~ 是输入类型， ~y~ 是输出类型。并且我们也尝试用形如 ~f x = x + 1~ 的代码定义过一些函数。那么，作为函数式编程语言的Haskell中的函数到底有什么特别之处呢？

首先说明一点，Haskell中的函数本质上是一种特殊的表达式—— \lambda 表达式。在Haskell中 \lambda 表达式的写法为
#+BEGIN_SRC haskell
\ 标识符 -> 表达式
#+END_SRC
标识符代表函数的输入，表达式即由输入得到输出的算式。之所以用反斜杠“ ~\~ ”引领 \lambda 表达式，据说是因为反斜杠与 \lambda 的斜边很相似，姑且信之。如果用 \lambda 表达式来表示对整数加一的运算，则代码可以写成 ~\ x -> x + 1~ 。

所以，Haskell中函数的特别之处在于，函数是一种表达式。

在程序语言中，表达式的一个重要特性就是它可以递归定义，即表达式是由表达式构成的。例如，在大多数程序语言中，加法表达式和乘法表达式通常定义为：
#+BEGIN_EXAMPLE
表达式 ::= 加法表达式 | 乘法表达式 | 单位表达式
单位表达式 ::= 标识符
加法表达式 ::= 表达式 + 表达式
乘法表达式 ::= 表达式 * 表达式
#+END_EXAMPLE
基于这样的定义，我们可以很方便地构造出更加复杂的表达式，例如 ~(a + b) + c~ 或者 ~a * b + c~ 等，而无需额外的特别语法支持。

\lambda 表达式同样也可以递归定义。其箭头符“ ~->~ ”右边的部分是一个表达式，当然可以是另外一个 \lambda 表达式，比如以下的代码。
#+BEGIN_SRC haskell
\ x -> (\ y -> x + y)
#+END_SRC
这个表达式的意义是，当用某个值（例如1）代入 ~x~ 时，将得到另外一个表达式 ~\ y -> 1 + y~ 。再继续将某个值（例如2）代入 ~y~ 时，最终将得到 ~1 + 2 = 3~ 。通过在 \lambda 表达式中嵌套 \lambda 表达式，我们实际上实现了一个两输入的函数运算。依此类推，三输入乃至更多输入的函数运算都可以用 \lambda 表达式实现。

由于这种嵌套定义“多输入” \lambda 表达式的方式略显繁琐，Haskell提供了另外一种简写形式，即允许在右箭头左边出现多个标识符。所以，上述表达式可以改写成
#+BEGIN_SRC haskell
\ x y -> x + y
#+END_SRC
这样看起来就顺眼多了。 *但是，要注意千万不要被简写形式所误导。一个 \lambda 表达式表示的始终是一个单输入单输出的映射关系。*

*  \lambda 表达式的应用（Application）
将某个具体值或者另一个表达式代入一个 \lambda 表达式从而演算出新的值或者表达式的过程称为“应用”。在Haskell中，形如 ~表达式A 表达式B~ 的连续两个表达式即表示将表达式A应用于表达式B，显然表达式A必须可以演算出一个 \lambda 表达式。例如在GHCi中输入
#+BEGIN_SRC haskell
Prelude> (\ x -> x + 1) 1
2
#+END_SRC
即表示将表达式 ~\ x -> x + 1~ 应用于 ~1~ 从而演算得到 ~1 + 1 = 2~ 。

应用也是一个表达式，并且是左结合的，也就是说 ~表达式A 表达式B 表达式C~ 等价于 ~(表达式A 表达式B）表达式C~ 。因此，我们可以很方便地将一个“多输入” \lambda 表达式应用于“多个”输入值。比如
#+BEGIN_SRC haskell
Prelude> (\ x -> \ y -> x + y) 1 2
3
#+END_SRC
这一运算的具体过程是：首先将 \lambda 表达式 ~\ x -> \ y -> x + y~ 应用于 1，得到另一个 \lambda 表达式 ~\ y -> 1 + y~ ，再将其应用于2，最终得到3。

* 绑定（Binding）

但是，如以上各例那样每当需要进行运算时都重写一个 \lambda 表达式的方式未免太笨拙。实际上，在Haskell中 \lambda 表达式可以绑定到某个符号后反复应用。绑定的语法形式为 ~标识符 =  \lambda 表达式~ ，例如
#+BEGIN_SRC haskell
Prelude> f = \ x y -> x + y
#+END_SRC
\lambda 表达式经绑定之后，就可以反复应用了。
#+BEGIN_SRC haskell
Prelude> f 1 2
3
Prelude> f 1 (f 2 3)
6
#+END_SRC

以上写法可以再进一步简化，将多个 \lambda 表达式的输入挪到等号左边，写成
#+BEGIN_SRC haskell
f x y = x + y
#+END_SRC
至此，代码已经非常接近我们通常所理解的函数定义了。但是，无论其形式如何变化，其本质依然是将一个单输入单输出的 \lambda 表达式绑定到一个符号而已。

* 局部绑定
以上形式定义了一种全局绑定，即所绑定的符号在全局范围内（通常是一个module之内）都有效。此外，还可以定义一种局部绑定，其语法形式为 ~let 绑定1; 绑定2; ... 绑定n in 表达式~ 。这样定义的绑定只对 ~in~ 之后的表达式有效，在其它地方都不可见。局部绑定也是一种表达式，可以出现在任何允许表达式的地方（比如 ~->~ 右边)。

以下代码既定义一个全局绑定 ~f~ ，又在 ~f~ 所绑定的表达式范围内定义了两个局部绑定 ~f~ 和 ~g~ 。
#+BEGIN_SRC haskell
f x y = let f x y = x - y; g x y = x + y in f (g x x) (g x x)
#+END_SRC
虽然以上代码中并没有出现 ~->~ ，但是您可以想想局部绑定究竟是在哪个隐藏的 ~->~ 之右。

局部绑定还可以利用Haskell的缩进语法改写为
#+BEGIN_SRC haskell
  f x = let f x y = x - y
            g x y = x + y
        in f (g x x) (g x x)
#+END_SRC

局部绑定还有另外一种等价形式 ~表达式 where 绑定1; ... 绑定n~ 。所以上述代码还可以改写为
#+BEGIN_SRC haskell
f x = f (g x x) (g x x) where f x y = x - y; g x y = x + y
#+END_SRC
或者再利用缩进语法写为
#+BEGIN_SRC haskell
  f x = f (g x x) (g x x)
    where f x y = x - y
          g x y = x + y
#+END_SRC

* 操作符也是 \lambda 表达式
严谨地说，应该是操作符也绑定着某个 \lambda 表达式。比如 ~x + y~ 中的 ~+~ 号，可以理解为一个如下的绑定
#+BEGIN_SRC haskell
(+) x y = op_add x y
#+END_SRC
我们用 ~op_add~ 指代一个真正的非 \lambda 表达式的加法算法。

操作符的绑定本质上与标识符的绑定并无区别，只是定义绑定和应用绑定的形式不同。在Haskell中，数据标识符以任何ASCII或者unicode小写字母开头后接若干个大小写字母，数字及单引号构成。还有一种以大写字母开头的类型标识符暂且不担。操作符则以ASCII符号字符开头后接若干个ASCII或者unicode符号字符构成。所谓ASCII符号字符是!#$%&*+./<=>?@\^|-~中的任意一个。

所以 ~f~ 是一个标识符， ~+~ 是一个操作符。

我们可以将任意 \lambda 表达式用绑定到标识符的方法绑定到一个自定义的操作符，只须将操作符放入()中即可。例如以下代码重新定义了一个加法操作符 ~.\/.~ 。
#+BEGIN_SRC haskell
(.\/.) x y = x + y
#+END_SRC

应用操作符绑定时也需要将操作符放在()中。比如
#+BEGIN_SRC haskell
foo = (.\/.) 1 2
-- foo == 3
#+END_SRC

此外，鉴于操作符通常是进行两输入的运算，Haskell特别为操作符定义了适合于两输入的绑定和应用形式，即将操作符放在两个参数中间，此时不需要再添加()。所以上面的绑定和应用可以改写为
#+BEGIN_SRC haskell
x .\/. y = x + y
foo = 1 .\/. 2
#+END_SRC

但是这并不是说操作符只可与“两输入” \lambda 表达式绑定。下面就是一个利用特殊语法将 ~.\/.~ 绑定到一个“三输入” \lambda 表达式的代码。
#+BEGIN_SRC haskell
(x .\/. y) z = x + y * z
foo = (1 .\/. 2) 3
-- foo == 7
#+END_SRC

再进一步，标识符也可以用这种特殊语法绑定和应用，只需将标识符放在``之中即可。例如
#+BEGIN_SRC haskell
x `f` y = x + y
foo = 1 `f` 2
-- foo == 3
#+END_SRC

最后，让我们再回头看一下本篇开头提到的那个“函数定义”
#+BEGIN_SRC haskell
f x = x + 1
#+END_SRC
实际上定义的是一个对标识符 ~f~ 的 \lambda 表达式绑定，而 ~+~ 是一个已经预定义好的操作符 \lambda 表达式绑定。另外，所谓多输入的函数，实际上是一个多级嵌套定义的 \lambda 表达式。函数的运算是通过 \lambda 表达式的应用来实现的。虽然在本文中所举的例子都非常简单，但是在Haskell中无论多么复杂的函数运算，都是通过 \lambda 表达式及绑定实现。纵观Haskell中的函数，一言以蔽之， \lambda 表达式而已。
